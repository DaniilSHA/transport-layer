@Controller
public class BookController {
    @QueryMapping
    public Book bookById(@Argument String id) {
        return Book.getById(id);
    }

    @SchemaMapping
    public Author author(Book book) {
        return Author.getById(book.authorId());
    }

    @MutationMapping
    public String addBook(
            @Argument String name,
            @Argument int pageCount,
            @Argument String firstNameAuthor,
            @Argument String lastNameAuthor) {

        return Book.add(name, pageCount, firstNameAuthor, lastNameAuthor);
    }
}

----------------

type Query {
    bookById(id: ID): Book
}

type Mutation {
    addBook(name: String!, pageCount: Int, firstNameAuthor: String!, lastNameAuthor: String!): ID!
}

type Book {
    id: ID
    name: String!
    pageCount: Int
    author: Author
}

type Author {
    id: ID
    firstName: String
    lastName: String
}

-------------------

http://localhost:8080/graphiql


query {
  readAllVideo{
    id
    title
    tags
    duration
    likeCount
    isPublish
    author{
      firstName
    }
  }
}

mutation {
  createVideo(
    title: "v1"
    tags: ["tag1", "tag2"]
    duration: 10
    likeCount: 0
    isPublish: true
    authorFirstName: "Petr"
    authorLastName: "Stringov"
  )
}

public int getRandomNumberUsingNextInt(int min, int max) {
    Random random = new Random();
    return random.nextInt(max - min) + min;
}

type Subscription {
    like: Video
    greeting(count: Int): String
}

@SubscriptionMapping
public Flux<Video> like() {
    return Flux.fromStream(Stream.generate(() -> 1))
            .delayElements(Duration.ofSeconds(1))
            .map(integer -> {
                List<Video> videos = store.readAllVideos();
            if (!videos.isEmpty())
                return Optional.of(videos.get(0));
            else
                return Optional.<Video>empty();
            })
            .filter(Optional::isPresent)
            .map(Optional::get);

}